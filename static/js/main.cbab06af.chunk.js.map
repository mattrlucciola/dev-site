{"version":3,"sources":["redux/types/projectTypes.js","redux/reducers/projectReducer.js","redux/reducers/baseReducer.js","redux/store.js","redux/actions/projectActions.js","components/main/body/project/projectNav/ProjectNav.jsx","components/main/body/project/projectPreview/ProjectPreview.jsx","components/main/body/project/projectDescription/ProjectDescription.jsx","components/main/body/project/projectStack/ProjectStack.jsx","util/slugify.js","components/main/body/project/Project.jsx","components/main/body/projectObjectsArr.js","components/main/body/project/ProjectList.jsx","components/main/body/Body.jsx","components/main/nav/Nav.jsx","components/main/Main.jsx","serviceWorker.js","index.js","App.js"],"names":["CURRENT_PROJECT","initialState","currentProject","combineReducers","base","state","action","type","project","middleware","thunk","store","createStore","baseReducer","applyMiddleware","updateCurrentProject","payload","dispatch","ProjectNav","projectObj","title","repoURL","siteURL","className","href","ProjectPreview","imgURL","src","alt","buildImgElem","ProjectDescription","description","ProjectStack","stackObj","stackElemArr","key","toolsElemArr","map","tool","idx","push","buildStackElem","slugify","string","a","p","RegExp","split","join","toString","toLowerCase","replace","c","charAt","indexOf","onEventActivateProject","e","isActive","window","history","replaceState","location","origin","Project","useDispatch","useSelector","currentProjectTitle","console","log","id","onScroll","onMouseOver","projectObjectsArr","frontend","backend","ProjectList","Body","Nav","onClick","scroll","newLocation","buildProjectElemList","Main","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbab06af.chunk.js","sourcesContent":["export const CURRENT_PROJECT = \"CURRENT_PROJECT\";","// types\nimport {CURRENT_PROJECT} from '../types/projectTypes';\n// initial state\nconst initialState = {currentProject: {}}\n// main\nexport default function ProjectReducer(state=initialState, action) {\n    switch(action['type']) {\n        case CURRENT_PROJECT:\n            return {...state, currentProject: action['payload']}\n        default: return {...state}\n    }\n}","// modules\nimport {combineReducers} from 'redux';\n// redux\nimport ProjectReducer from './projectReducer';\n\n// main\nconst BaseReducer = (state = {}, action) => {\n    switch(action.type) {\n        default: return {...state};\n    }\n}\n\n// main\nexport default combineReducers({\n    base: BaseReducer,\n    project: ProjectReducer,\n})","// modules\nimport {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\n// redux\nimport baseReducer from './reducers/baseReducer';\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    baseReducer,\n    {},\n    applyMiddleware(...middleware)\n);\nexport default store;","import {CURRENT_PROJECT} from '../types/projectTypes';\n\nexport const updateCurrentProject = (payload) => dispatch => {\n    dispatch({\n        type: CURRENT_PROJECT,\n        payload,\n    })\n}","// App > Main > Body > Project > ProjectNav\n// react\nimport React from 'react';\n// style\nimport './ProjectNav.css';\n\n// main\nexport default function ProjectNav({projectObj}){\n    // destructuring\n    let {title, repoURL, siteURL} = projectObj;\n\n    return(\n        <div className=\"ProjectNav\">\n            <div className=\"title\">{title}</div>\n            <div className=\"urls\">\n                {repoURL && <a className=\"repoURL\" href={repoURL}>GitHub</a>}\n                {siteURL && <a className=\"siteURL\" href={siteURL}>Website</a>}\n            </div>\n        </div>\n    )\n}","// App > Main > Body > Project > ProjectPreview\n// react\nimport React from 'react';\n// style\nimport './ProjectPreview.css';\n\n// main\nexport default function ProjectPreview({imgURL, siteURL}){\n    const buildImgElem = (imgURL, siteURL) => {\n        return (\n            <div className=\"imgContainer\" >\n                {/* <a target=\"imgLink\" rel=\"noopener noreferrer\" href={siteURL}> */}\n                <img src={imgURL} alt=\"\" className=\"preview-img\"/>\n                {/* </a> */}\n            </div>\n        )\n    }\n    return(\n        <div className=\"ProjectPreview\">\n            {imgURL && buildImgElem(imgURL, siteURL)}\n        </div>\n    )\n}","// App > Main > Body > Project > ProjectDescription\n// react\nimport React from 'react';\n// style\nimport './ProjectDescription.css'\n\n// main\nexport default function ProjectDescription({description}){\n    return(\n        <div className=\"ProjectDescription\">\n            <div className=\"text\">\n                {description && description}\n            </div>\n        </div>\n    )\n}","// App > Main > Body > Project > ProjectStack\n// react\nimport React from 'react';\n// style\nimport './ProjectStack.css'\n\n// main\nexport default function ProjectStack({stackObj}){\n    // destructuring\n    // let {} = stackObj;\n    // build fxns\n    const buildStackElem = () => {\n        // holds our whole stack\n        let stackElemArr = []\n\n        if (typeof stackObj !== typeof {}) {\n            return <div className=\"notstack\"></div>\n        }\n        for (const key in stackObj) {\n            const toolsArr = stackObj[key]\n            const toolsElemArr = toolsArr.map((tool, idx) => {\n                return (\n                    <div className={`${key} tool`} key={`${key}-${tool}-${idx}`}>{tool}</div>\n                )\n            })\n            stackElemArr.push(\n            <div className={`${key} group`}>\n                <div className=\"group-title\">{key} </div>\n                <div className=\"group-list\">{toolsElemArr} </div>\n            </div>\n            )\n        }\n        return stackElemArr\n    }\n    return(\n        <div className=\"ProjectStack\">\n            {buildStackElem()}\n        </div>\n    )\n}","export const slugify = (string) => {\n    const a = 'àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·/_,:;'\n    const b = 'aaaaaaaaaacccddeeeeeeeegghiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz------'\n    const p = new RegExp(a.split('').join('|'), 'g')\n  \n    return string.toString().toLowerCase()\n        .replace(' ', '-') // Replace spaces with -\n        .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n        .replace('&', '-and-') // Replace & with 'and'\n        .replace(/\\W/g, '') // Remove all non-word characters\n        .replace('----', '-').replace('---', '-').replace('--', '-') // Replace multiple - with single -\n        .replace(/^-+/, '') // Trim - from start of text\n        .replace(/-+$/, '') // Trim - from end of text\n}","// App > Main > Body > Project\n// react\nimport React from 'react';\n// redux\nimport {useDispatch, useSelector} from 'react-redux';\nimport {updateCurrentProject} from '../../../../redux/actions/projectActions';\n// components\nimport ProjectNav from './projectNav/ProjectNav';\nimport ProjectPreview from './projectPreview/ProjectPreview';\nimport ProjectDescription from './projectDescription/ProjectDescription';\nimport ProjectStack from './projectStack/ProjectStack';\n// style\nimport './Project.css';\nimport { slugify } from '../../../../util/slugify';\n// event handlers\nconst onEventActivateProject = ({e, projectObj, isActive, dispatch, updateCurrentProject}) => {\n    if (!isActive) {\n        dispatch(updateCurrentProject(projectObj));\n        window.history.replaceState(null, null, `${window.location.origin}#${slugify(projectObj['title'])}`)\n    }\n}\n\n// main\nexport default function Project({projectObj}){\n    // destructure\n    const {title, siteURL, description, stackObj, imgURL} = projectObj;\n    // redux state\n    let dispatch = useDispatch();\n    const {currentProject} = useSelector(state => state['project']);\n    const currentProjectTitle = currentProject['title'];\n    const isActive = title === currentProject['title'];\n    console.log('current', title, currentProjectTitle, currentProjectTitle === title)\n    return(\n        <div\n            id={slugify(title)}\n            className={`Project${isActive ? ' active' : ''} w100`}\n            onScroll={(e) => {onEventActivateProject({projectObj, currentProjectTitle, dispatch, updateCurrentProject, isActive})}}\n            onMouseOver={(e) => {onEventActivateProject({projectObj, currentProjectTitle, dispatch, updateCurrentProject, isActive})}}\n        >\n            <ProjectNav projectObj={projectObj} />\n            <ProjectPreview imgURL={imgURL} siteURL={siteURL} />\n            <div className=\"bottom\">\n                <ProjectDescription description={description} />\n                <ProjectStack stackObj={stackObj} />\n            </div>\n        </div>\n    )\n}","export const projectObjectsArr = [\n    // {\n        // title: \"Custom Admin\",\n    // },\n    // {\n    //     title: \"Tascal\",\n    //     repoURL: \"https://github.com/mattrlucciola/Tascal.git\",\n    //     siteURL: \"https://tascal.dev\",\n    //     description: `\\\n    //         Project management, scheduling, productivity-tracking, and note taking app.\n    //     `,\n    //     stackObj: {\n    //         frontend: ['React.js', 'Redux.js'],\n    //         backend: ['MongoDB, Node.js, Django, Python'],\n    //     },\n    //     imgURL: \"/assets/images/Tascal-preview.png\",\n    // },\n    {\n        title: \"Diffuse\",\n        repoURL: \"https://github.com/mattrlucciola/diffuse.git\",\n        siteURL: \"https://diffuse.dev\",\n        description: `\\\n            Collaborative songwriting software.\\\n            Register, sign in, create and save projects to your profile.\\\n            Add others to contribute to your songs and track the history of the songs progression!\\\n        `,\n        stackObj: {\n            frontend: ['React.js', 'D3.js', \"Redux.js\"],\n            backend: ['MongoDB', 'Node.js', 'Django', 'Django Rest Framework'],\n        },\n        imgURL: \"/assets/images/diffuse-preview.png\",\n    },\n    {\n        title: \"BDA\",\n        repoURL: \"https://github.com/mattrlucciola/bpm-detection-algorithm.git\",\n        siteURL: \"https://mattrlucciola.github.io/bpm-detection-algorithm/\",\n        description: `\n            Detects BPM and displays track information from user-added songs using a simple peak-detection algorithm\n        `,\n        stackObj: {\n            frontend: ['JavaScript (ES6)', 'Web Audio API', 'React', 'Redux'],\n        },\n        imgURL: \"/assets/images/bda-preview.png\",\n    },\n    {\n        title: \"BikeStar\",\n        repoURL: \"https://github.com/mattrlucciola/bikestar.git\",\n        siteURL: \"https://tranquil-bastion-44697.herokuapp.com/\",\n        description: `\n            This application allows cyclists to find trails in select cities.  The app maintains a user-generated list of trails, conaining useful information regarding navigation to and from the trail, features, and ratings.\n        `,\n        stackObj: {\n            frontend: ['React.js'],\n            backend: ['Node.js', 'Express.js', 'PostgreSQL']\n        },\n        imgURL: \"/assets/images/bikestar-preview.png\",\n    },\n    {\n        title: \"Cofi\",\n        repoURL: \"https://github.com/mattrlucciola/cofi.git\",\n        siteURL: \"https://mattrlucciola.github.io/cofi/\",\n        description: `\\\n            A digital interface for synthesizing musical sequences in a step-wise manner.\\\n            Simply point and click on the note you want to activate, and the time at which to activate.\\\n        `,\n        stackObj: {\n            frontend: ['React.js', 'Web Audio API', \"Redux.js\"],\n        },\n        imgURL: \"/assets/images/cofi-preview.png\",\n    },\n]","// App > Main > Body > ProjectList\n// react\nimport React from 'react';\n// components\nimport Project from './Project';\nimport {projectObjectsArr} from '../projectObjectsArr';\n\n// main\nexport default function ProjectList(){\n    const buildProjectElems = (projectObjectsArr) => {\n        return projectObjectsArr.map((projectObj, idx) => {\n            return <Project projectObj={projectObj} key={`p-o-${idx}`} />\n        })\n    }\n    return(\n        <div className=\"ProjectList\">\n            {buildProjectElems(projectObjectsArr)}\n        </div>\n    )\n}","// react\nimport React from 'react';\n// components\nimport ProjectList from './project/ProjectList';\nimport Progress from './progress/Progress';\nimport Intro from './Intro';\n// style\nimport './Body.css';\n\n// main\nexport default function Body(){\n    return(\n        <div className=\"Body\">\n            {/* <Progress /> */}\n            {/* <Intro /> */}\n            <ProjectList />\n        </div>\n    )\n}","// App.jsx > Main.jsx > Nav.jsx\n// react\nimport React from 'react';\n// redux\nimport {useSelector, useDispatch} from 'react-redux';\nimport {updateCurrentProject} from '../../../redux/actions/projectActions';\n// style\nimport './Nav.css';\n// util\nimport {slugify} from '../../../util/slugify';\n// global vars\nimport {projectObjectsArr} from '../body/projectObjectsArr';\n\n// main\nexport default function Nav(){\n    // redux state\n    let dispatch = useDispatch();\n    let {currentProject} = useSelector(state => state['project'])\n    // build fxns\n    const buildProjectElemList = (projectObjectsArr, dispatch, updateCurrentProject) => {\n        return projectObjectsArr.map((projectObj, idx) => {\n            const {title} = projectObj;\n            return (\n                <div\n                    className={`navProject${currentProject['title'] === title ? ' active' : ''}`}\n                    onClick={() => {\n                        let newLocation = `${window.location.origin}#${slugify(title)}`;\n                        window.location = newLocation;\n                        dispatch(updateCurrentProject(projectObj))\n                    }}\n                    key={`n-p-${idx}`}\n                >\n                    {title}\n                </div>\n            )\n        })\n    }\n    return(\n        <div className=\"Nav\">\n            <div\n                className=\"home\"\n                onClick={() => {\n                    window.scroll(0, 0);\n                    window.location = `${window.location.origin}#`;\n                }}\n            >\n                Home\n            </div>\n            <div className=\"projectElemList\">\n                {buildProjectElemList(projectObjectsArr, dispatch, updateCurrentProject)}\n            </div>\n        </div>\n    )\n}","// App > Main > Body\n// react\nimport React from 'react';\n// style\nimport './Main.css';\n\n// projects\nimport Body from './body/Body';\nimport Nav from './nav/Nav';\n\nexport default function Main(){\n    return(\n        <div className=\"Main\" >\n            <Nav />\n            <Body />\n        </div>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// react\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// redux\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// App\n// react\nimport React from 'react';\n// components\nimport Main from './components/main/Main';\n// styling\nimport './App.css';\n\n// main\nexport default function App() {\n    return (\n        <div className=\"App\">\n            <Main />\n        </div>\n    );\n}\n"],"sourceRoot":""}